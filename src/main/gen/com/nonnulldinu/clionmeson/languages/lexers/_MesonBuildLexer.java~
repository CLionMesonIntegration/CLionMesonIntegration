/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.nonnulldinu.clionmeson.languages.lexers;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.nonnulldinu.clionmeson.build.psi.MesonBuildTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_MesonBuildLexer.flex</tt>
 */
public class _MesonBuildLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\4\2\3\1\4\22\0\1\1\1\36\1\63\1\21\1\0\1\41\1\0\1\16\1\30\1\31"+
    "\1\37\1\42\1\32\1\43\1\62\1\40\1\6\1\10\6\13\2\14\1\61\1\0\1\34\1\33\1\35"+
    "\1\60\1\0\6\12\24\15\1\24\1\17\1\25\1\0\1\15\1\0\1\51\1\7\1\55\1\56\1\47\1"+
    "\50\1\15\1\20\1\22\1\15\1\57\1\52\1\15\1\23\1\54\2\15\1\45\1\53\1\44\1\46"+
    "\2\15\1\11\2\15\1\26\1\0\1\27\7\0\1\2\32\0\1\5\337\0\1\5\177\0\13\5\35\0\2"+
    "\2\5\0\1\5\57\0\1\5\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\2\1\4\1\5\1\6"+
    "\1\5\1\1\1\5\1\1\2\5\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1"+
    "\1\21\1\22\1\23\1\24\1\25\6\5\1\26\1\27"+
    "\1\30\2\31\1\32\1\4\2\0\1\5\1\0\1\33"+
    "\3\0\1\34\1\35\1\36\1\5\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\6\5\1\50"+
    "\1\5\1\31\1\51\1\52\1\5\1\33\1\53\1\33"+
    "\3\0\1\54\6\5\1\55\2\5\1\56\1\57\2\5"+
    "\1\60\1\61\3\5\1\62\1\63\1\5\1\64\6\5"+
    "\1\65\2\5\1\66\1\5\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\150\0\150\0\150\0\150\0\150\0\150\0\150\0\u0340"+
    "\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0"+
    "\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\150\0\150"+
    "\0\150\0\u064c\0\u0680\0\150\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u02a4\0\u0854\0\u0208\0\u0208"+
    "\0\u0888\0\150\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\150\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u0208\0\u09f4\0\150\0\u06e8\0\u071c\0\u0a28\0\150\0\150"+
    "\0\u0784\0\u0a5c\0\u0a90\0\u0ac4\0\u0208\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0208\0\u0c30\0\u0c64\0\u0c98\0\u0208"+
    "\0\u0ccc\0\u0d00\0\u0208\0\u0208\0\u0d34\0\u0d68\0\u0d9c\0\u0208"+
    "\0\u0208\0\u0dd0\0\u0208\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0208\0\u0f3c\0\u0f70\0\u0208\0\u0fa4\0\u0208";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\6\1\7\1\10\1\11\1\12"+
    "\2\13\2\12\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\13\1\42\1\43\1\44\2\13\1\45"+
    "\1\46\2\13\1\47\1\50\1\51\1\3\4\52\1\3"+
    "\12\52\1\53\43\52\1\54\65\0\1\4\1\5\2\6"+
    "\1\7\57\0\1\5\1\7\2\5\1\7\57\0\1\6"+
    "\1\5\2\6\1\7\57\0\5\7\64\0\1\55\1\56"+
    "\1\55\1\57\1\0\1\55\56\0\10\13\2\0\1\13"+
    "\1\0\2\13\20\0\1\13\1\60\12\13\12\0\1\12"+
    "\1\0\1\12\2\0\2\12\55\0\10\13\2\0\1\13"+
    "\1\0\2\13\20\0\14\13\4\0\16\61\1\62\1\63"+
    "\44\61\6\0\10\13\2\0\1\15\1\64\2\13\20\0"+
    "\14\13\4\0\2\65\3\66\57\65\6\0\10\13\2\0"+
    "\1\13\1\0\1\13\1\67\20\0\4\13\1\70\7\13"+
    "\12\0\10\13\2\0\1\13\1\0\2\13\20\0\10\13"+
    "\1\71\3\13\37\0\1\72\63\0\1\73\63\0\1\74"+
    "\63\0\1\75\63\0\1\76\63\0\1\77\63\0\1\100"+
    "\63\0\1\101\63\0\1\102\36\0\10\13\2\0\1\13"+
    "\1\0\2\13\20\0\1\13\1\103\12\13\12\0\10\13"+
    "\2\0\1\13\1\0\1\13\1\104\20\0\6\13\1\105"+
    "\5\13\12\0\10\13\2\0\1\13\1\0\2\13\20\0"+
    "\5\13\1\106\2\13\1\107\3\13\12\0\10\13\2\0"+
    "\1\13\1\0\1\13\1\110\20\0\14\13\12\0\10\13"+
    "\2\0\1\13\1\0\2\13\20\0\1\13\1\111\12\13"+
    "\12\0\10\13\2\0\1\13\1\0\2\13\20\0\10\13"+
    "\1\112\3\13\4\0\4\52\1\0\12\52\1\0\43\52"+
    "\24\0\1\113\20\0\2\113\15\0\1\113\6\0\1\55"+
    "\1\0\1\55\2\0\1\55\56\0\1\114\1\0\1\114"+
    "\61\0\3\115\1\0\3\115\32\0\3\115\3\0\2\115"+
    "\13\0\10\13\2\0\1\13\1\0\2\13\20\0\3\13"+
    "\1\116\10\13\4\0\16\61\1\117\1\63\44\61\16\0"+
    "\1\120\45\0\16\61\1\121\1\63\44\61\2\64\3\122"+
    "\57\64\2\0\3\66\13\0\1\123\1\124\50\0\10\13"+
    "\2\0\1\13\1\0\2\13\20\0\1\125\13\13\12\0"+
    "\10\13\2\0\1\13\1\0\2\13\20\0\2\13\1\126"+
    "\11\13\12\0\10\13\2\0\1\13\1\0\2\13\20\0"+
    "\12\13\1\127\1\13\12\0\10\13\2\0\1\13\1\0"+
    "\1\130\1\13\20\0\7\13\1\131\4\13\12\0\10\13"+
    "\2\0\1\13\1\0\2\13\20\0\6\13\1\132\5\13"+
    "\12\0\10\13\2\0\1\13\1\0\2\13\20\0\1\13"+
    "\1\133\12\13\12\0\10\13\2\0\1\13\1\0\2\13"+
    "\20\0\12\13\1\134\1\13\12\0\10\13\2\0\1\13"+
    "\1\0\1\13\1\135\20\0\14\13\12\0\10\13\2\0"+
    "\1\13\1\0\2\13\20\0\5\13\1\136\6\13\6\0"+
    "\3\122\13\0\1\123\1\124\62\0\1\123\1\124\42\0"+
    "\2\124\3\137\57\124\6\0\10\13\2\0\1\13\1\0"+
    "\2\13\20\0\3\13\1\140\10\13\12\0\10\13\2\0"+
    "\1\13\1\0\1\141\1\13\20\0\4\13\1\142\7\13"+
    "\12\0\10\13\2\0\1\13\1\0\2\13\20\0\4\13"+
    "\1\143\7\13\12\0\10\13\2\0\1\13\1\0\2\13"+
    "\20\0\3\13\1\144\10\13\12\0\10\13\2\0\1\13"+
    "\1\0\2\13\20\0\7\13\1\145\4\13\12\0\10\13"+
    "\2\0\1\13\1\0\2\13\20\0\3\13\1\146\10\13"+
    "\12\0\10\13\2\0\1\13\1\0\2\13\20\0\1\147"+
    "\13\13\12\0\10\13\2\0\1\13\1\0\2\13\20\0"+
    "\13\13\1\150\6\0\3\137\13\0\1\123\1\124\50\0"+
    "\10\13\2\0\1\13\1\0\2\13\20\0\4\13\1\151"+
    "\7\13\12\0\10\13\2\0\1\13\1\0\2\13\20\0"+
    "\10\13\1\152\3\13\12\0\10\13\2\0\1\13\1\0"+
    "\2\13\20\0\3\13\1\153\10\13\12\0\10\13\2\0"+
    "\1\13\1\0\2\13\20\0\5\13\1\154\6\13\12\0"+
    "\10\13\2\0\1\13\1\0\1\155\1\13\20\0\14\13"+
    "\12\0\10\13\2\0\1\13\1\0\2\13\20\0\1\13"+
    "\1\156\12\13\12\0\10\13\2\0\1\13\1\0\2\13"+
    "\20\0\11\13\1\157\2\13\12\0\10\13\2\0\1\13"+
    "\1\0\1\13\1\160\20\0\14\13\12\0\10\13\2\0"+
    "\1\13\1\0\2\13\20\0\3\13\1\161\10\13\12\0"+
    "\10\13\2\0\1\162\1\0\2\13\20\0\14\13\12\0"+
    "\10\13\2\0\1\13\1\0\2\13\20\0\2\13\1\163"+
    "\11\13\12\0\10\13\2\0\1\13\1\0\2\13\20\0"+
    "\5\13\1\164\6\13\12\0\10\13\2\0\1\13\1\0"+
    "\2\13\20\0\3\13\1\165\10\13\12\0\10\13\2\0"+
    "\1\13\1\0\2\13\20\0\11\13\1\166\2\13\12\0"+
    "\10\13\2\0\1\167\1\0\2\13\20\0\14\13\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\15\1\7\11\17\1\3\11\2\1\1\11"+
    "\1\1\2\0\1\1\1\0\1\1\3\0\4\1\11\11"+
    "\10\1\1\11\3\1\2\11\1\1\3\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MesonBuildLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MesonBuildLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 56: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 57: break;
          case 3: 
            { return NEWLINE;
            } 
            // fall through
          case 58: break;
          case 4: 
            { return OCTNUM;
            } 
            // fall through
          case 59: break;
          case 5: 
            { return ID;
            } 
            // fall through
          case 60: break;
          case 6: 
            { return DECNUM;
            } 
            // fall through
          case 61: break;
          case 7: 
            { return BRACE_BEGIN;
            } 
            // fall through
          case 62: break;
          case 8: 
            { return BRACE_END;
            } 
            // fall through
          case 63: break;
          case 9: 
            { return CURLY_BRACE_BEGIN;
            } 
            // fall through
          case 64: break;
          case 10: 
            { return CURLY_BRACE_END;
            } 
            // fall through
          case 65: break;
          case 11: 
            { return PAREN_BEGIN;
            } 
            // fall through
          case 66: break;
          case 12: 
            { return PAREN_END;
            } 
            // fall through
          case 67: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 68: break;
          case 14: 
            { return ATR_OP;
            } 
            // fall through
          case 69: break;
          case 15: 
            { return COMP_OP4;
            } 
            // fall through
          case 70: break;
          case 16: 
            { return COMP_OP5;
            } 
            // fall through
          case 71: break;
          case 17: 
            { return MULT_OP;
            } 
            // fall through
          case 72: break;
          case 18: 
            { return DIV_OP;
            } 
            // fall through
          case 73: break;
          case 19: 
            { return MOD_OP;
            } 
            // fall through
          case 74: break;
          case 20: 
            { return PLUS_OP;
            } 
            // fall through
          case 75: break;
          case 21: 
            { return MINUS_OP;
            } 
            // fall through
          case 76: break;
          case 22: 
            { return LANG_TOKEN_QMARK;
            } 
            // fall through
          case 77: break;
          case 23: 
            { return LANG_TOKEN_COLON;
            } 
            // fall through
          case 78: break;
          case 24: 
            { return LANG_TOKEN_DOT;
            } 
            // fall through
          case 79: break;
          case 25: 
            { /*ignore*/
            } 
            // fall through
          case 80: break;
          case 26: 
            { yybegin(YYINITIAL); return STRMULTILINE;
            } 
            // fall through
          case 81: break;
          case 27: 
            { return STRSIMPLE;
            } 
            // fall through
          case 82: break;
          case 28: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 83: break;
          case 29: 
            { return IN_OP;
            } 
            // fall through
          case 84: break;
          case 30: 
            { return LANG_TOKEN_IF;
            } 
            // fall through
          case 85: break;
          case 31: 
            { return COMP_OP1;
            } 
            // fall through
          case 86: break;
          case 32: 
            { return COMP_OP2;
            } 
            // fall through
          case 87: break;
          case 33: 
            { return COMP_OP3;
            } 
            // fall through
          case 88: break;
          case 34: 
            { return COMP_OP6;
            } 
            // fall through
          case 89: break;
          case 35: 
            { return COMP_ATR_OP1;
            } 
            // fall through
          case 90: break;
          case 36: 
            { return COMP_ATR_OP2;
            } 
            // fall through
          case 91: break;
          case 37: 
            { return COMP_ATR_OP3;
            } 
            // fall through
          case 92: break;
          case 38: 
            { return COMP_ATR_OP4;
            } 
            // fall through
          case 93: break;
          case 39: 
            { return COMP_ATR_OP5;
            } 
            // fall through
          case 94: break;
          case 40: 
            { return LANG_TOKEN_OR;
            } 
            // fall through
          case 95: break;
          case 41: 
            { return BINNUM;
            } 
            // fall through
          case 96: break;
          case 42: 
            { return HEXNUM;
            } 
            // fall through
          case 97: break;
          case 43: 
            { yybegin(MULTILINE_STRING);
            } 
            // fall through
          case 98: break;
          case 44: 
            { return LANG_TOKEN_NOT;
            } 
            // fall through
          case 99: break;
          case 45: 
            { return LANG_TOKEN_AND;
            } 
            // fall through
          case 100: break;
          case 46: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 101: break;
          case 47: 
            { return BOOL_LITERAL_TRUE;
            } 
            // fall through
          case 102: break;
          case 48: 
            { return LANG_TOKEN_ELSE_IF;
            } 
            // fall through
          case 103: break;
          case 49: 
            { return LANG_TOKEN_ELSE;
            } 
            // fall through
          case 104: break;
          case 50: 
            { return LANG_TOKEN_JUMP_BREAK;
            } 
            // fall through
          case 105: break;
          case 51: 
            { return LANG_TOKEN_ENDIF;
            } 
            // fall through
          case 106: break;
          case 52: 
            { return BOOL_LITERAL_FALSE;
            } 
            // fall through
          case 107: break;
          case 53: 
            { return LANG_TOKEN_FOREACH;
            } 
            // fall through
          case 108: break;
          case 54: 
            { return LANG_TOKEN_JUMP_CONTINUE;
            } 
            // fall through
          case 109: break;
          case 55: 
            { return LANG_TOKEN_FOREACH_END;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
